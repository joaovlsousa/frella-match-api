generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id
  name     String
  email    String   @unique
  imageUrl String?  @map("image_url")
  password String?
  role     UserRole

  submissions     Submission[]
  freelancerWorks Work[]       @relation("freelancer_relation")
  worksOwner      Work[]       @relation("recruiter_relation")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

model Work {
  id            String     @id
  title         String
  description   String
  endsAt        DateTime   @map("ends_at")
  amountCharged Float      @map("amount_charged")
  status        WorkStatus

  recruiterId  String       @map("recruiter_id")
  freelancerId String?      @map("freelancer_id")
  submissions  Submission[]

  createdAt DateTime @default(now()) @map("created_at")

  recruiter  User  @relation("recruiter_relation", fields: [recruiterId], references: [id], onDelete: Cascade)
  freelancer User? @relation("freelancer_relation", fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("works")
}

model Submission {
  id            String   @id
  body          String
  portfolioLink String?  @map("portfolio_link")
  linkedinLink  String?  @map("linkedin_link")
  deliveryTime  DateTime @map("delivery_time")
  amountCharged Float    @map("amount_charged")

  freelancerId String @map("freelancer_id")
  workId       String @map("work_id")

  createdAt DateTime @default(now()) @map("created_at")

  freelancer User @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  work       Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

enum UserRole {
  RECRUITER
  FREELANCER
}

enum WorkStatus {
  OPEN
  CLOSED
  FINISHED
}
